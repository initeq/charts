grafanaDashboards:
  nginx:
    enabled: false

promtail:
  enabled: false

loki:
  enabled: false

kube-prometheus-stack:
  enabled: false
  # CHANGE THIS as necessary
  kubeTargetVersionOverride: 1.18.10
  defaultDashboardsEnabled: true
  nameOverride: initeq-vision
  namespaceOverride: vision
  coreDns:
    enabled: false
  kubeDns:
    enabled: true
  kubeProxy:
    serviceMonitor:
      https: false
    service:
      selector:
        k8s-app: kube-proxy
  kubeControllerManager:
    serviceMonitor:
      https: false
    service:
      selector:
        k8s-app: kube-controller-manager
  kubelet:
    serviceMonitor:
      https: false
      # From kubernetes 1.18, /metrics/resource/v1alpha1 renamed to /metrics/resource
      resourcePath: /metrics/resource
  kubeScheduler:
    serviceMonitor:
      https: false
    service:
      selector:
        k8s-app: kube-scheduler
  grafana:
    # encrypted in secrets.yaml
    # adminPassword:
    # ingress:
    #   enabled: true
    #   annotations:
    #     kubernetes.io/ingress.class: nginx
    #     cert-manager.io/cluster-issuer: letsencrypt-prod
    #     acme.cert-manager.io/http01-edit-in-place: "true"
    #   hosts:
    #     - grafana.MYDOMAIN.com
    #   paths:
    #     - "/"
    #   tls:
    #    - secretName: grafana-tls
    #      hosts:
    #        - grafana.MYDOMAIN.com
    persistence:
      enabled: true
      size: 50Gi
    grafana.ini:
      server:
        root_url: "https://grafana.MYODMAIN.com"
      # auth.gitlab:
      #   enabled: true
      #   allow_sign_up: true
      #   # encrypted in secrets.yaml
      #   # client_id:
      #   # client_secret:
      #   scopes: read_api
      #   auth_url: https://gitlab.com/oauth/authorize
      #   token_url: https://gitlab.com/oauth/token
      #   api_url: https://gitlab.com/api/v4
  prometheus:
    # ingress:
    #   enabled: true
    #   annotations:
    #     kubernetes.io/ingress.class: nginx
    #     cert-manager.io/cluster-issuer: letsencrypt-prod
    #     acme.cert-manager.io/http01-edit-in-place: "true"
    #     nginx.ingress.kubernetes.io/auth-type: basic
    #     nginx.ingress.kubernetes.io/auth-secret: vision-basic-auth
    #     nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
    #   hosts:
    #     - prometheus.MYDOMAIN.com
    #   paths:
    #     - "/"
    #   tls:
    #    - secretName: prometheus-tls
    #      hosts:
    #        - prometheus.MYDOMAIN.com
    prometheusSpec:
      externalUrl: https://prometheus.MYDOMAIN.com
  alertmanager:
    tplConfig: true
    config:
      route:
        group_by: ['job']
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 12h
        receiver: 'slack_notification_channel'
        routes:
        - match:
            alertname: Watchdog
          receiver: 'null'
    alertmanagerSpec:
      externalUrl: https://alertmanager.MYDOMAIN.com
    # ingress:
    #   enabled: true
    #   annotations:
    #     kubernetes.io/ingress.class: nginx
    #     cert-manager.io/cluster-issuer: letsencrypt-prod
    #     acme.cert-manager.io/http01-edit-in-place: "true"
    #     nginx.ingress.kubernetes.io/auth-type: basic
    #     nginx.ingress.kubernetes.io/auth-secret: vision-basic-auth
    #     nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
    #   hosts:
    #     - alertmanager.MYDOMAIN.com
    #   paths:
    #     - "/"
    #   tls:
    #    - secretName: alertmanager-tls
    #      hosts:
    #        - alertmanager.MYDOMAIN.com
